CalcTools - Calculator Website Implementation

## 1. Main Layout (MainLayout.tsx)
```tsx
import { Link } from "wouter";
import { useTheme } from "next-themes";
import { Moon, Sun, Calculator } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Helmet } from "react-helmet";

export default function MainLayout({
  children,
  title = "CalcTools - Professional Calculator Tools",
  description = "Free online calculator tools for currency and percentage calculations.",
}: {
  children: React.ReactNode;
  title?: string;
  description?: string;
}) {
  const { theme, setTheme } = useTheme();

  return (
    <div className="min-h-screen bg-background">
      <Helmet>
        <title>{title}</title>
        <meta name="description" content={description} />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
      </Helmet>

      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center gap-6">
            <Link href="/">
              <a className="flex items-center space-x-2">
                <Calculator className="h-6 w-6" />
                <span className="font-bold text-lg">CalcTools</span>
              </a>
            </Link>
            <div className="hidden sm:flex">
              <Input
                type="search"
                placeholder="Search calculators..."
                className="w-[200px] lg:w-[300px]"
              />
            </div>
          </div>

          <div className="flex items-center space-x-4">
            <Link href="/about">
              <a className="text-sm font-medium">About</a>
            </Link>
            <Link href="/contact">
              <a className="text-sm font-medium">Contact</a>
            </Link>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            >
              <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            </Button>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        {children}
      </main>

      <footer className="border-t py-8 bg-muted/50">
        <div className="container mx-auto px-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Contact: Rajibul Hussen | Email: skyygg38@gmail.com
            </p>
            <p className="text-sm text-muted-foreground mt-4">
              Â© {new Date().getFullYear()} CalcTools. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}
```

## 2. Homepage (Home.tsx)
```tsx
import { useState } from "react";
import { Helmet } from "react-helmet";
import SearchBar from "@/components/SearchBar";
import CalculatorGrid from "@/components/CalculatorGrid";
import { defaultSEO } from "@/lib/seo";

export default function Home() {
  const [search, setSearch] = useState("");

  return (
    <>
      <Helmet>
        <title>{defaultSEO.title}</title>
        <meta name="description" content={defaultSEO.description} />
      </Helmet>

      <div className="space-y-8">
        <div className="max-w-2xl mx-auto">
          <SearchBar value={search} onChange={setSearch} />
        </div>

        <div className="space-y-4">
          <h1 className="text-3xl font-bold text-center">
            Free Online Calculators
          </h1>
          <p className="text-center text-muted-foreground max-w-2xl mx-auto">
            Get instant and accurate results for all your calculation needs.
          </p>
        </div>

        <CalculatorGrid search={search} />
      </div>
    </>
  );
}
```

## 3. Calculator Components

### Currency Calculator (CurrencyCalculator.tsx)
```tsx
import { useState } from "react";
import { Helmet } from "react-helmet";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { calculatorSEO } from "@/lib/seo";

const currencies = [
  { code: "USD", name: "US Dollar" },
  { code: "EUR", name: "Euro" },
  { code: "GBP", name: "British Pound" },
  { code: "JPY", name: "Japanese Yen" },
  { code: "AUD", name: "Australian Dollar" },
  { code: "CAD", name: "Canadian Dollar" },
  { code: "CHF", name: "Swiss Franc" },
  { code: "CNY", name: "Chinese Yuan" },
  { code: "INR", name: "Indian Rupee" },
].sort((a, b) => a.name.localeCompare(b.name));

export default function CurrencyCalculator() {
  const [amount, setAmount] = useState("");
  const [fromCurrency, setFromCurrency] = useState("USD");
  const [toCurrency, setToCurrency] = useState("EUR");
  const [result, setResult] = useState<number | null>(null);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const convertCurrency = async () => {
    setError("");
    setResult(null);

    const value = parseFloat(amount);
    if (isNaN(value) || value <= 0) {
      setError("Please enter a valid amount");
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(
        `https://api.exchangerate-api.com/v4/latest/${fromCurrency}`
      );
      
      if (!response.ok) {
        throw new Error("Failed to fetch exchange rates");
      }

      const data = await response.json();
      const rate = data.rates[toCurrency];
      const converted = value * rate;
      setResult(Math.round(converted * 100) / 100);
    } catch (err) {
      setError("Failed to convert currency. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>{calculatorSEO["currency"].title}</title>
        <meta name="description" content={calculatorSEO["currency"].description} />
      </Helmet>

      <div className="max-w-2xl mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>Currency Calculator</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Amount</label>
              <Input
                type="number"
                placeholder="Enter amount"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">From</label>
                <Select value={fromCurrency} onValueChange={setFromCurrency}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {currencies.map((currency) => (
                      <SelectItem key={currency.code} value={currency.code}>
                        {currency.code} - {currency.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">To</label>
                <Select value={toCurrency} onValueChange={setToCurrency}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {currencies.map((currency) => (
                      <SelectItem key={currency.code} value={currency.code}>
                        {currency.code} - {currency.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {error && (
              <p className="text-sm text-destructive">{error}</p>
            )}

            <Button 
              onClick={convertCurrency} 
              className="w-full"
              disabled={loading}
            >
              {loading ? "Converting..." : "Convert"}
            </Button>

            {result !== null && (
              <div className="mt-4 p-4 bg-primary/10 rounded-lg">
                <p className="text-center">
                  {amount} {fromCurrency} = <span className="font-bold">{result} {toCurrency}</span>
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </>
  );
}
```

### CalculatorGrid Component (CalculatorGrid.tsx)
```tsx
import CalculatorCard from "./CalculatorCard";
import { calculators } from "@/lib/calculator-data.tsx";

interface CalculatorGridProps {
  search: string;
}

export default function CalculatorGrid({ search }: CalculatorGridProps) {
  const filteredCalculators = calculators.filter(calc => 
    calc.title.toLowerCase().includes(search.toLowerCase()) ||
    calc.description.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {filteredCalculators.map((calc) => (
        <CalculatorCard
          key={calc.id}
          title={calc.title}
          description={calc.description}
          icon={calc.icon}
          href={calc.href}
        />
      ))}
    </div>
  );
}
```

## 4. Data and Configuration

### Calculator Data (calculator-data.tsx)
```tsx
import { Calculator, Percent, DollarSign } from "lucide-react";
import React from "react";

interface CalculatorData {
  id: string;
  title: string;
  description: string;
  icon: JSX.Element;
  href: string;
}

export const calculators: CalculatorData[] = [
  {
    id: "currency",
    title: "Currency Calculator",
    description: "Convert between different currencies with real-time rates",
    icon: <DollarSign className="h-6 w-6" />,
    href: "/calculator/currency"
  },
  {
    id: "percentage",
    title: "Percentage Calculator",
    description: "Calculate percentages and percentage changes easily",
    icon: <Percent className="h-6 w-6" />,
    href: "/calculator/percentage"
  }
];
```

### SEO Configuration (seo.ts)
```typescript
export interface SEOProps {
  title: string;
  description: string;
}

export const defaultSEO: SEOProps = {
  title: "CalcTools - Free Online Calculators",
  description: "Free online calculators for all your financial and utility needs. Easy to use and accurate results instantly."
};

export const calculatorSEO: Record<string, SEOProps> = {
  "currency": {
    title: "Currency Calculator | CalcTools",
    description: "Convert between different currencies with our free currency calculator. Get real-time exchange rates and accurate conversions."
  },
  "percentage": {
    title: "Percentage Calculator | CalcTools",
    description: "Calculate percentages easily with our free calculator. Find percentages of numbers, percentage increase/decrease, and more."
  }
};
```

This is the complete implementation of the simplified calculator website. The code includes:
1. Main layout with navigation and dark mode
2. Homepage with search functionality
3. Calculator implementations (Currency and Percentage)
4. SEO optimization
5. Responsive design
6. Type safety with TypeScript

To run the website:
1. Make sure all dependencies are installed
2. Start the development server using `npm run dev`
3. The website will be available at http://0.0.0.0:5000
